632. Smallest Range Covering Elements from K Lists
Hard

1586

28

Add to List

Share
You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.

We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.

 

Example 1:

Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
Output: [20,24]
Explanation: 
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
List 2: [0, 9, 12, 20], 20 is in range [20,24].
List 3: [5, 18, 22, 30], 22 is in range [20,24].
Example 2:

Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
Output: [1,1]
Example 3:

Input: nums = [[10,10],[11,11]]
Output: [10,11]
Example 4:

Input: nums = [[10],[11]]
Output: [10,11]
Example 5:

Input: nums = [[1],[2],[3],[4],[5],[6],[7]]
Output: [1,7]
 



class Solution {
public:
   
    struct triplet{
        int val,apos,vpos;
        triplet(int v,int ap,int vp){
            val=v;
            apos=ap;
            vpos=vp;
            
        }
    };
    struct compare{
        bool operator()(triplet &t1,triplet &t2)
        {
            return t1.val>t2.val;
        }
    };
     int sol(priority_queue<triplet,vector<triplet>,compare> pq)
    {
        int prev;
        while(!pq.empty()){
            prev=pq.top().val;
            pq.pop();
        }
        return prev;
    }
    vector<int> smallestRange(vector<vector<int>>& nums) {
        priority_queue<triplet,vector<triplet>,compare>pq;
        int i=0;
        int maximum=INT_MIN;
        for(auto a:nums){
            triplet t(a[0],i++,0);
            pq.push(t);
            	maximum = max(maximum, a[0]);
        }
        vector<int>res;
       int s,e,resr=INT_MAX;
        while(!pq.empty()){
            triplet curr=pq.top();
            
        int minimum=curr.val;
          
            pq.pop();
            if(maximum-minimum<resr){
                resr=maximum-minimum;
                s=minimum;
                e=maximum;
                
            }
            
            int ap=curr.apos,vp=curr.vpos;
            if(vp+1==nums[ap].size())
          
               break;
               
          
             triplet t(nums[ap][vp+1],ap,vp+1);
                pq.push(t);
            if(t.val>maximum)
                maximum=t.val;
        }
        res.push_back(s);
        res.push_back(e);
        return res;
    }
};